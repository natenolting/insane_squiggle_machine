import "./p5.min.js";
import "./p5.collide2d.min.js";

// get all random values from one location
const RANDOMIZER_INCREMENT = fxrand();
let randomizer = RANDOMIZER_INCREMENT;
function getRandomizer() {
    randomizer += RANDOMIZER_INCREMENT;
    if (randomizer >= 1) {
        randomizer = fxrand();
    }
    return randomizer;
}

// flip a coin but more like toggle on and off
let currentRandomizerCoinFlip = Boolean(Math.round(getRandomizer()));

function randomzerCoinFlip() {
    currentRandomizerCoinFlip = !currentRandomizerCoinFlip;
    return currentRandomizerCoinFlip;
};

// randomize a roll between 1 and x
function randomizerRollADie(roll) {
    return round(map(getRandomizer(), 0, 1, 1, roll));
}

const COLOR = new Colors();
const HELPER = new Helpers();
const DEBUG = true;
const ENLARGED_CANVAS_WIDTH = 3000;
const ENLARGED_CANVAS_HEIGHT = 3000;
const CANVAS_WIDTH_MULTIPLIER = 1
const CANVAS_HEIGHT_MULTIPLIER = 1
const USE_ISOMETRIC = true;
const SIDE_HEIGHT_MULTIPLIER = 28 / 49;
const BASE_CELLS_PER_SIDE = 15;
const TRANSPARENT = false;
const X_SMALL = 'tightest';
const SMALL = 'tight';
const MEDIUM = 'middle';
const LARGE = 'loose';
const X_LARGE = 'loosest';

const config = {
    noiseSeed: (getRandomizer() * 100_000) >> 0,

    /** number of rows & columns */
    cells: getCellSizeString(getRandomizer()),

    /** noise scale  */
    noiseScale: 0.5 + getRandomizer() * 24,

    pallet: "",

};

const pallet = {
  pallet: [],
  black: null,
  white: null,
}


const pos = {};
let palletData;
let pallets;
//let settingsData;
let settings;
let saveCount = 0;
let saveId = HELPER.makeid(10);
let colorIndex = 0;
let colorSet = [];
let cg;
let squiggles = [];

function getCellSizeString(value) {
    if (value <= .2) {
        return X_SMALL
    }
    if (value <= .4) {
        return SMALL
    }
    if (value <= .6) {
        return MEDIUM
    }
    if (value <= .8) {
        return LARGE
    }
    if (value <= 1) {
        return X_LARGE
    }
}

function getCellsFromString(string) {
    let c;
    let base = BASE_CELLS_PER_SIDE;
    switch (string) {
        case X_LARGE:
            c = base
            break;
        case LARGE:
            c = base * .5
            break;
        case MEDIUM:
            c = base * 1.5
            break;
        case SMALL:
            c = base * 2
            break;
        case X_SMALL:
            c = base * 2.5
            break;
    }
    return c;
}



function setupPosition() {
    let cW = window.innerWidth;
    let cH = window.innerHeight;

    if (cW > cH) {
        pos.cW = cH;
        pos.cH = cH;
    } else {
        pos.cW = cW;
        pos.cH = cW;
    }

    let w = ENLARGED_CANVAS_WIDTH;
    let h = ENLARGED_CANVAS_HEIGHT;
    if (w > h) {
        pos.w = h;
        pos.h = h;
    } else {
        pos.w = w;
        pos.h = w;
    }
    pos.w = w * CANVAS_WIDTH_MULTIPLIER;
    pos.h = h * CANVAS_HEIGHT_MULTIPLIER;
    pos.t = 0;
    pos.l = 0;
}

function setupSettings() {
    let cfs = getCellsFromString(config.cells)
    // prep settings object
    //settings = settingsData.settings;
    settings = {};
    settings.canvasWidth = pos.w;
    settings.canvasHeight = pos.h;
    settings.cellWidth = pos.w / cfs;
    settings.cellHeight = pos.h / cfs;
    settings.cols = cfs;
    settings.rows = cfs;
    settings.margin = setupMargin();
    settings.cells = (new Cells(settings.cols, settings.rows, settings.cellWidth, settings.cellHeight)).populateCells(false)[0];
}


function setupMargin() {
    return floor(HELPER.mean([pos.w * .03, pos.h * .03]));
}

function incrementColorIndex() {
    colorIndex++
    if (colorIndex >= pallet.rgb.length - 1) {
        colorIndex = 0;
    }
}

function setupPallet() {

  pallets = palletData.pallets;
  let palletIndex = HELPER.rollADie(pallets.length) - 1;
  let randPallet = pallets[palletIndex];
  for (var i = 0; i < randPallet.length; i++) {
    let hex = randPallet[i];
    let rgb = COLOR.HEXtoRGB(hex);
    pallet.pallet.push(color(rgb[0], rgb[1], rgb[2], 1));

  }

  pallet.black = color(0,0,0,1);
  pallet.white = color(255,255,255,1);

  console.log(pallet);

}

function saveFileName() {
    let fileName;
    fileName = `${saveId}_${saveCount}.${TRANSPARENT ? 'png' : 'jpg'}`;
    saveCount++;
    return fileName;
}

function init() {
    noiseSeed(config.noiseSeed);
    setupPosition();
    setupSettings();
    setupPallet();

    frameRate(config.frameRate);

    // prep cells

    if (DEBUG) {
        console.log(config, settings, pallet, pos);
    }

}

function range(start, end) {
  return Array(end - start + 1).fill().map((_, idx) => start + idx)
}

window.preload = () => {
    palletData = loadJSON("./palettes.json");
}

window.$fxhashFeatures = {
    ...config,
};


window.setup = () => {
    init();
    pixelDensity(1);
    colorMode(RGB, 255, 255, 255, 1);
    createCanvas(pos.cW, pos.cH);
};

window.windowResized = () => {
    // clear();
    // init();
};


window.draw = () => {
    noLoop();

    background(255, 255, 255, 1);
    fill(255, 255, 255, 1);
    noStroke();
    rect(0, 0, pos.cW, pos.cH)

    cg = createGraphics(pos.w, pos.h);
    cg.colorMode(RGB, 255, 255, 255, 1);
    cg.background(255, 255, 255, 1);
    cg.pixelDensity(1);
    cg.blendMode(BLEND);

    for (var i = 0; i < settings.cells.length; i++) {
      let c = settings.cells[i];
      cg
    }




    image(cg, 0, 0, pos.cW, pos.cH);

    fxpreview();
};

window.keyPressed = () => {

    if (key === "s") {
        save(saveFileName());
    }
}
